---
name: Enhanced CI Pipeline

on:
  push:
    branches: ['main', 'master']
  pull_request:
    branches: ['main', 'master']

env:
  PNPM_STORE_PATH: ${{ runner.temp }}/pnpm-store
  PERFORMANCE_LOG_DIR: ${{ runner.temp }}/performance-logs

jobs:
  # Parallel job for faster execution
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ hashFiles('**/pnpm-lock.yaml', '**/requirements.txt') }}" >> $GITHUB_OUTPUT

      - name: Setup pnpm with enhanced caching
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js with cache
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Setup Python with cache
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt

  # Parallel linting and type checking
  lint-and-type:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: |
          start_time=$(date +%s)
          pnpm typecheck
          end_time=$(date +%s)
          echo "typecheck_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: ESLint
        run: |
          start_time=$(date +%s)
          pnpm lint
          end_time=$(date +%s)
          echo "lint_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Prettier check
        run: |
          start_time=$(date +%s)
          pnpm check-format
          end_time=$(date +%s)
          echo "prettier_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Stylelint
        run: |
          start_time=$(date +%s)
          pnpm lint:css
          end_time=$(date +%s)
          echo "stylelint_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Markdown lint
        run: |
          start_time=$(date +%s)
          pnpm lint:md
          end_time=$(date +%s)
          echo "markdownlint_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: YAML lint
        run: |
          start_time=$(date +%s)
          pnpm lint:yaml
          end_time=$(date +%s)
          echo "yamllint_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Spellcheck
        run: |
          start_time=$(date +%s)
          pnpm spellcheck
          end_time=$(date +%s)
          echo "spellcheck_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: EditorConfig enforcement
        run: |
          start_time=$(date +%s)
          pnpm lint:editorconfig
          end_time=$(date +%s)
          echo "editorconfig_time=$((end_time - start_time))" >> $GITHUB_ENV

  # Parallel testing
  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        test-type: [unit, integration, coverage]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Python tooling
        run: pip install -r requirements-dev.txt

      - name: Run Node.js tests
        if: matrix.test-type == 'unit'
        run: |
          start_time=$(date +%s)
          pnpm test
          end_time=$(date +%s)
          echo "node_test_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Run Python tests
        if: matrix.test-type == 'unit'
        run: |
          start_time=$(date +%s)
          pytest --cov=macro_system --cov=meta_agent --cov=qa
          end_time=$(date +%s)
          echo "python_test_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Run coverage tests
        if: matrix.test-type == 'coverage'
        run: |
          start_time=$(date +%s)
          pnpm coverage
          end_time=$(date +%s)
          echo "coverage_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          start_time=$(date +%s)
          python -m pytest tests/integration/
          end_time=$(date +%s)
          echo "integration_test_time=$((end_time - start_time))" >> $GITHUB_ENV

  # Security and compliance checks
  security:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Python tooling
        run: pip install -r requirements-dev.txt

      - name: Validate governance configuration
        run: |
          start_time=$(date +%s)
          python scripts/validate_configs.py
          end_time=$(date +%s)
          echo "governance_validation_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: Bandit security scan
        run: |
          start_time=$(date +%s)
          bandit -q -r macro_system meta_agent qa -x macro_system/tests,meta_agent/tests,tests
          end_time=$(date +%s)
          echo "bandit_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: pip-audit
        run: |
          start_time=$(date +%s)
          pip-audit -r requirements-dev.txt
          end_time=$(date +%s)
          echo "pip_audit_time=$((end_time - start_time))" >> $GITHUB_ENV

      - name: pnpm audit
        run: |
          start_time=$(date +%s)
          pnpm audit --audit-level=high
          end_time=$(date +%s)
          echo "pnpm_audit_time=$((end_time - start_time))" >> $GITHUB_ENV

  # Performance metrics collection
  performance:
    runs-on: ubuntu-latest
    needs: [lint-and-type, test, security]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create performance report
        run: |
          mkdir -p ${{ env.PERFORMANCE_LOG_DIR }}

          # Collect performance metrics
          cat > ${{ env.PERFORMANCE_LOG_DIR }}/performance_report.json << EOF
          {
            "build_id": "${{ github.run_id }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "workflow": "${{ github.workflow }}",
            "runner": "${{ runner.os }}",
            "jobs": {
              "lint_and_type": {
                "status": "${{ needs.lint-and-type.result }}",
                "typecheck_time": "${{ env.typecheck_time || 'N/A' }}",
                "lint_time": "${{ env.lint_time || 'N/A' }}",
                "prettier_time": "${{ env.prettier_time || 'N/A' }}",
                "stylelint_time": "${{ env.stylelint_time || 'N/A' }}",
                "markdownlint_time": "${{ env.markdownlint_time || 'N/A' }}",
                "yamllint_time": "${{ env.yamllint_time || 'N/A' }}",
                "spellcheck_time": "${{ env.spellcheck_time || 'N/A' }}",
                "editorconfig_time": "${{ env.editorconfig_time || 'N/A' }}"
              },
              "test": {
                "status": "${{ needs.test.result }}",
                "node_test_time": "${{ env.node_test_time || 'N/A' }}",
                "python_test_time": "${{ env.python_test_time || 'N/A' }}",
                "coverage_time": "${{ env.coverage_time || 'N/A' }}",
                "integration_test_time": "${{ env.integration_test_time || 'N/A' }}"
              },
              "security": {
                "status": "${{ needs.security.result }}",
                "governance_validation_time": "${{ env.governance_validation_time || 'N/A' }}",
                "bandit_time": "${{ env.bandit_time || 'N/A' }}",
                "pip_audit_time": "${{ env.pip_audit_time || 'N/A' }}",
                "pnpm_audit_time": "${{ env.pnpm_audit_time || 'N/A' }}"
              }
            }
          }
          EOF

      - name: Upload performance metrics
        uses: actions/upload-artifact@v3
        with:
          name: performance-metrics-${{ github.run_id }}
          path: ${{ env.PERFORMANCE_LOG_DIR }}/

      - name: Comment performance metrics on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = '${{ env.PERFORMANCE_LOG_DIR }}/performance_report.json';

            if (fs.existsSync(path)) {
              const metrics = JSON.parse(fs.readFileSync(path, 'utf8'));
              
              const comment = `## ðŸ“Š Performance Metrics
              
              **Build ID**: ${metrics.build_id}
              **Timestamp**: ${metrics.timestamp}
              
              ### Job Performance
              ${Object.entries(metrics.jobs).map(([job, data]) => `
              **${job.replace(/_/g, ' ').toUpperCase()}**: ${data.status}
              ${Object.entries(data).filter(([key]) => key !== 'status').map(([key, value]) => 
                `- ${key.replace(/_/g, ' ')}: ${value}s`
              ).join('\n')}
              `).join('\n')}
              
              ---
              *Performance metrics collected automatically by Enhanced CI Pipeline*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # Commitlint check (runs after all other jobs)
  commitlint:
    runs-on: ubuntu-latest
    needs: [lint-and-type, test, security]
    if: always() && (needs.lint-and-type.result == 'success' && needs.test.result == 'success' && needs.security.result == 'success')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Commitlint history
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            pnpm commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.event.pull_request.head.sha }}
          else
            pnpm commitlint --from=${{ github.sha }}~1 --to=${{ github.sha }}
          fi
