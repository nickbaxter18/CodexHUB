---
name: QA Pipeline

on:
  push:
    branches: ['main', 'master']
  pull_request:
    branches: ['main', 'master']

env:
  PNPM_STORE_PATH: ${{ runner.temp }}/pnpm-store

jobs:
  js-and-docs-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Configure pnpm store
        run: |
          mkdir -p "$PNPM_STORE_PATH"
          pnpm config set store-dir "$PNPM_STORE_PATH"

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Node quality suite
        run: python -m src.performance.cli node-quality --output-dir results/performance/node

      - name: Documentation quality suite
        run: python -m src.performance.cli docs-quality --output-dir results/performance/docs

      - name: Commitlint history
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            pnpm commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.event.pull_request.head.sha }}
          else
            pnpm commitlint --from=${{ github.sha }}~1 --to=${{ github.sha }}
          fi

      - name: Upload Node metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: node-quality-metrics
          path: results/performance/node

      - name: Upload documentation metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-quality-metrics
          path: results/performance/docs

  python-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements-dev.txt

      - name: Install Python tooling
        run: pip install -r requirements-dev.txt

      - name: Validate environment configurations
        run: python -m src.common.config_loader --env .env.example --env config/environments/ci.env --env config/environments/development.env --json

      - name: Python quality suite
        run: python -m src.performance.cli python-quality --output-dir results/performance/python

      - name: Upload Python metrics
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-quality-metrics
          path: results/performance/python

  codex-status:
    runs-on: ubuntu-latest
    needs: [js-and-docs-quality, python-quality]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Render Codex status report
        run: python scripts/codex_status.py
